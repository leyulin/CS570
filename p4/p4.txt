/* Author:Leyu Lin*/
/* Prof: Carroll*/
/* CS570*/
/*Description: simple command line interpreter reads from stdin has built-ins such as cd, !!,done, ! number lines up to 10*/
/*also it has basic in/output redirection and '>&' '>>' '>>&'redirection.*/
/*also allow for reading in script files, and vertical piping use child and granchild*/ 
/*Due: 11/29/19*/
#include "p2.h"

extern int HasSlash; // Global flag for '\|'
int num_words; // number of words that user inputs
int prompt_number = 1; // number of valid commands
int bb_num; // banban with line numbers.	
int c; // return by getword -1 is EOF or done 0 is space or newline
int pipe_pos; // the position after '|' for execution in child process
int doll_pos; // the position of ban dollar sign
int history_lines; //number of lines stores in histry_table 
int line_length; // the line length of each arguments
char arguments[MAXSTORAGE]; // use to pass memory location and give head word address to *words
int history_words[MAXITEM]; //store the number of words for each lines.
int history_head[MAXITEM][MAXSTORAGE]; //store the number of Head  for each lines
int history_len[MAXITEM]; // store length of each argument
char histry_table[MAXSTORAGE]; //deep copy of argument array in order for tracking;
char * words[MAXITEM]; // Addresses of start of each word from arguments
char * in_file, * out_file, * eor_file; // I/O files name
int input_fd, output_fd, devnull_fd, argv_fd, eor_fd, p1_fd, p0_fd; // I/O file descriptors
int Reparse_flag = 0;
int bg_flag, in_flag, out_flag, vp_flag, oa_flag, bb_flag, dollar_flag,
ap_flag, apo_flag, h_flag = 0; // flag for meta-characters '&''<''>''|''>&''!!''>>''>>&''#'respectively
int sf_flag = 0; // flag for script file       

/*--------------------------------------main----------------------------------------------*/
/* for built-ins simply check words[0] if match command such 'cd','!!','!1-9'*/
/* I/O redirection open file fork to child process and redirect to Stdout/Stdin*/
/* then excute from child. Then parent should wait child to die */
/*'>&' redirection. Used both eor and err file redirect to Stdout and stderr*/
/*'>>' similar to '>' with different file attributes*/
/*'>>&' similar to '>&' with different file attributes*/
/* background redirect to /dev/null (accept everthing to it return a EOF)*/
/* parent should not wait for child, excute rightway and clean all zombies. print childpid.*/
/*---------------------------------------------------------------------------------------*/
int main(int argc, char ** argv) {
  /*local declartions*/
  pid_t pid, kidpid; // process id  child
  setpgid(0, 0); //set group id for p2.c         

  /*Install customized sighandler catch SIGTERM in order to prevent program terminates*/
  (void) signal(SIGTERM, sighandler);
  for (;;) {
    /*check arg[1]*/
    if (argc > 2) {
      fprintf(stderr, "Too many arguments\n");
      exit(EXIT_FAILURE);
    }
    /*redirect stidin to a script file so ~/p2, ~/input work properly*/
    else if (argc == 2 && sf_flag == 0) {
      /*try to read the file*/
      if ((argv_fd = open(argv[1], O_RDONLY)) == -1) {
        perror(argv[1]);
        exit(EXIT_FAILURE);
      }
      if ((dup2(argv_fd, STDIN_FILENO)) == -1) {
        perror("bad file descriptor");
        exit(EXIT_FAILURE);
      }
      sf_flag++;
    }

    /*issue prompt*/
    prompt();
    num_words = parse();

    /* invalid null command */
    if (words[0] == NULL && (in_flag != 0 || out_flag != 0 || oa_flag != 0))
      fprintf(stderr, "Invalid null command.\n");

    /*end with EOF re-issue prompt*/
    if (c == -1 && num_words == 0) break;
    /*no words continue*/
    if (num_words == 0) continue;

    /*done at first*/
    if ((strcmp(words[0], "done")) == 0) break;

    if (num_words == 0) {} else {
      ++prompt_number;
    }

    /*ban dollar sign*/
    if (dollar_flag != 0 && (history_lines > 1)) {
      int j = 2;
      char * tmp;
      tmp = histry_table + history_head[history_lines - j][history_words[history_lines - j] - 1];
      while (!(strcmp(tmp, "!$"))) {
        ++j;
        tmp = histry_table + history_head[history_lines - j][history_words[history_lines - j] - 1];
      }
      words[doll_pos] = tmp;
    }

    /*banban command found */
    if (dollar_flag == 0 && bb_flag != 0) {
      if (bb_num > 9) {
        fprintf(stderr, "Exceed limit of tracking\n");
        continue;
      } else if (bb_num >= history_lines) {
        fprintf(stderr, "Event not found\n");
        continue;
      } else {
        banban();
      }
    }


    /*cd command found*/
    if ((strcmp(words[0], "cd")) == 0) {
      char * home;
      if (num_words > 2) {
        fprintf(stderr, "cd: too many arugments for change directory\n");
      }
      /*cd command by itslef need to define home directory*/
      else if (words[1] == NULL) {
        if ((home = getenv("HOME")) == NULL)
          fprintf(stderr, "HOME environment variable has not define.\n");
        else
          chdir(home);
      } else if (chdir(words[1]) == -1) {
        fprintf(stderr, "No such file or directory.\n");
      }
      continue;
    }

    /* '<' input redirection command found */
    if (in_flag != 0) {
      if (in_file == NULL) {
        fprintf(stderr, "missing name for input redirection \n");
        continue;
      }
      if (in_flag > 2) {
        fprintf(stderr, "ambiguous redirection should not use more than one operator\n");
        continue;
      }
      /* open file outside of fork if fails. make it read-only */
      if ((input_fd = open(in_file, O_RDONLY)) == -1) {
        perror(in_file);
        continue;
      }
    }

    /* '>' or '>>' output redirection command found */
    if (out_flag != 0 || ap_flag != 0) {
      /*O_RDWR: Request opening the file read/write*/
      /*O_APPEND: Write to end of the file*/
      /*O_CREAT: If file doesn't exist create new file*/
      /*O_EXCL: Ensures file is created, if file exitst error is sent */
      int flags = (ap_flag == 0) ? (O_RDWR | O_APPEND | O_CREAT | O_EXCL) : (O_WRONLY | O_APPEND);
      /* Open file outside of fork if fails. Allow for read/write permission */
      int modes = S_IRUSR | S_IWUSR;
      if (out_file == NULL) {
        fprintf(stderr, "missing name for output redirection\n");
        continue;
      }
	  /*cant have both redirect to STDOUT*/
      if ((out_flag > 2 || ap_flag > 2) || (out_flag != 0 && ap_flag != 0)) {
        fprintf(stderr, "Ambiguous output redirect.\n");
        continue;
      }
      if (out_flag > 2 || ap_flag > 2) {
        fprintf(stderr, "ambiguous redirection should not use more than one operator\n");
        continue;
      }
      if ((output_fd = open(out_file, flags, modes)) == -1) {
        perror(out_file);
        continue;
      }
    }

    /* '>&' and '>>&' stderr redirection command found similar above*/
    if (oa_flag != 0 || apo_flag != 0) {
      int flags = (apo_flag == 0) ? (O_RDWR | O_APPEND | O_CREAT | O_EXCL) : (O_WRONLY | O_APPEND);
      int modes = S_IRUSR | S_IWUSR;
      if (eor_file == NULL) {
        fprintf(stderr, "missing name for error output redirection\n");
        continue;
      }
	 /*cant have both redirect to STDOUT*/
      if ((oa_flag > 2 || apo_flag > 2) || (oa_flag != 0 && apo_flag != 0)) {
        fprintf(stderr, "Ambiguous output redirect.\n");
        continue;
      }
      /*open the eor file will be redirect to stderr*/
      if ((eor_fd = open(eor_file, flags, modes)) == -1) {
        perror(out_file);
        continue;

      }
    }


    /*'|' pipe command found */
    if (vp_flag != 0) {
      if (vp_flag > 1) {
        fprintf(stderr, "only support ONE pipe\n");
        continue;
      } else {
        pipehandler();
        continue;
      }
    }

    /* '&' background character command found */
    if (bg_flag != 0) {
      /* open /dev/null so background job doesn't read from stdin */
      if ((devnull_fd = open("/dev/null", O_RDONLY)) == -1) {
        perror("/dev/null");
        continue;
      }
    }

    /* Clear buffer so child will not fork extra stdout/stderr info */
    /* if point to recent stream not input fflush will flash buffer and may wirte some */
    /* unwrite data to the stream */
    fflush(stdout);
    fflush(stderr);

    /* Forking process to create a child */
    /* Fork failed return -1 success return 0 and child pid to parent*/
    if ((kidpid = fork()) == -1) {
      perror("Fork failed.\n");
      exit(1);
    }

    /* Child process */
    else if (kidpid == 0) {
      /* Redirect input file to STDIN. Close input file descriptor. */
      if (in_flag != 0) {
        if ((dup2(input_fd, STDIN_FILENO)) == -1) {
          perror("Failed to redirect file descriptor to STDIN");
          exit(1);
        }
        if ((close(input_fd)) == -1) {
          perror("Unable to close file descriptor\n");
          exit(1);
        }
      }
      /* Redirect output file to STDOUT. Close output file descriptor. */
      if (out_flag != 0 || ap_flag != 0) {
        if ((dup2(output_fd, STDOUT_FILENO)) == -1) {
          perror("Failed to redirect file descriptor to STDOUT");
          exit(1);
        }
        if ((close(output_fd)) == -1) {
          perror("Unable to close out file descriptor\n");
          exit(1);
        }
      }

      /* Redirect eor to STDERR and STDOUT. Close file descriptor. */
      if (oa_flag != 0 || apo_flag != 0) {
        if ((dup2(eor_fd, STDOUT_FILENO)) == -1) {
          perror("Failed to redirect file descriptor to STDOUT");
          exit(1);
        }
        if ((dup2(eor_fd, STDERR_FILENO)) == -1) {
          perror("Failed to redirect file descriptor to STDERR");
          exit(1);
        }
        if ((close(eor_fd)) == -1) {
          perror("Unable to close oa file descriptor\n");
          exit(1);
        }
      }
      /* Redirect /dev/null to STDIN */
      if (bg_flag != 0 && in_flag == 0) {
        if ((dup2(devnull_fd, STDIN_FILENO)) == -1) {
          perror("Failed to redirect file descriptor to STDIN");
          exit(1);
        }
        if ((close(devnull_fd)) == -1) {
          perror("Unable to close file descriptor\n");
          exit(1);
        }
      }

      /* Execute command */
      if ((execvp(words[0], words)) == -1) {
        fprintf(stderr, "%s:Command not found\n", words[0]);
        exit(9);
      }
    }

    /* Parent process */
    else {
      /* No background process found */
      if (bg_flag == 0) {
        /* Waits for child process to finish */
        for (;;) {
          CHK(pid = wait(NULL));
          if (pid == kidpid) {
            break;
          }
        }
      }
      /* Print out background process not wait for child*/
      else if (bg_flag) {
        printf("%s [%d]\n", words[0], kidpid);
      }
    }
  }
  killpg(getpgrp(), SIGTERM);
  if (sf_flag == 0) {
    printf("p2 terminated.\n");
  }
  exit(0);
}

/*--------------------------------------parse--------------------------------------------*/
/* Description:runs getword over and over, pass memory slots, use nextHead to mark address of*/
/* each start word. Every individual word follow by '\0' when it finish*/
/* Set '>&' '>' '<' '!!' '>&''>>''>>&''!!''!1-9''!$'flags properly.*/
/* -----------------------------------------------------------------------------------------*/

int parse() {
  int n = 0; // num of words
  int cnt = 0;
  int headcnt = 0;
  int x = 0; // counts for every chars
  int nextHead = 0;
  int prevTail = 0;
  int prevC = 0;
  int tmp = line_length;
  int lastwordsize = 0;
  char * tmp_argv;
  pipe_pos = 0;
  in_file = NULL, out_file = NULL, eor_file = NULL;
  history_len[history_lines] = line_length;
  /*clen flags*/
  bg_flag = 0, bb_num = 0, in_flag = 0, out_flag = 0, oa_flag = 0,dollar_flag = 0,h_flag = 0, bb_flag = 0, apo_flag = 0, ap_flag = 0, vp_flag = 0;
  /*replace !$ with the last word for redirection*/
  if (history_lines > 0) {tmp_argv = histry_table + history_head[history_lines - 1][history_words[history_lines - 1] - 1];
  lastwordsize = tmp - history_head[history_lines - 1][history_words[history_lines - 1] - 1];
  }
  for (;;) {	
    /*pass memory slots to getword in order to use nextHead to track each start of word*/
    /*words[0] means the command should be excute by execvp or use for strcmp.*/
    c = getword(arguments + nextHead); 
	/*End of file Or done break for next prompt if follow by'&' indicate background*/
    /*take '&' off from words simply put a null pointer to do background properly and set bg_flag.*/
    /*for space or newline break in order do next call and prompt again*/
    if (c == -1 || c == 0) {
      if ( * (arguments + nextHead) == 'd') //other done change size to 4 pointer at head of done
      {
        words[n] = arguments + nextHead;
        ++cnt;
        ++n;
        c = 4;
      } else if ( * (arguments + prevTail) == '&' && prevC == 1 && (n > 1)) {
        --n;
        ++bg_flag;
        break;
      } else {
        break;
      }
    } else {
      /*the max parse is 100 words if exceed stop a head*/
      /*in order to avoid seg fault*/
      if ((n + 1) == MAXITEM) {
        fprintf(stderr, "exceed maxitem\n");
        break;
      } else if (h_flag != 0) {
        continue;
      } else if (arguments[nextHead] == '#' && c == 1) {
        if (sf_flag != 0) {
          h_flag++;
        } else {
          words[n] = arguments + nextHead;
          ++n;
        }
      }
      /*see '<' set flag if flag set, set again for ambiguous error msg later */
      else if (arguments[nextHead] == '<' && c == 1 || in_flag == 1) {
        if (in_flag == 1) { //after '<' go to in_file for child process to redirect and excute
          in_file = arguments + nextHead;
          if (arguments[nextHead] == '!' && arguments[nextHead + 1] == '$') {
            in_file = tmp_argv;
          } else if (arguments[nextHead] == '&') {
            in_file = NULL;
          } else {
            in_file = arguments + nextHead;
          }

        }
        ++in_flag;
      }
      /*see '>' set flag if flag set, set again for ambiguous error msg later */
      else if (arguments[nextHead] == '>' && c == 1 || out_flag == 1) {
        if (out_flag == 1) { //after '>' go to out_file for child process to redirect and excute
          if (arguments[nextHead] == '!' && arguments[nextHead + 1] == '$') {
            out_file = tmp_argv;
          } else if (arguments[nextHead] == '&') {
            out_file = NULL;
          } else {
            out_file = arguments + nextHead;
          }
        }
        ++out_flag;
      } else if ((arguments[nextHead] == '>' && arguments[nextHead + 1] == '&') || oa_flag == 1) {
        if (oa_flag == 1) { //after '>&' go to eor_file for child process to redirect and excute
          if (arguments[nextHead] == '!' && arguments[nextHead + 1] == '$') {
            eor_file = tmp_argv;
          } else if (arguments[nextHead] == '&') {
            eor_file = NULL;
          } else {
            eor_file = arguments + nextHead;
          }
        }
        ++oa_flag;
        /*see '>>' set flag similar to '>' */
      } else if ((arguments[nextHead] == '>' && c == 2) || ap_flag == 1) {
        if (ap_flag == 1) {
          if (arguments[nextHead] == '!' && arguments[nextHead + 1] == '$') {
            out_file = tmp_argv;
          } else if (arguments[nextHead] == '&') {
            out_file = NULL;
          } else {
            out_file = arguments + nextHead;
          }
        }
        ++ap_flag;
        /*see '>>&' set flag  similar to '>&' */
      } else if ((arguments[nextHead] == '>' && c == 3) || apo_flag == 1) {
        if (apo_flag == 1) {
          if (arguments[nextHead] == '!' && arguments[nextHead + 1] == '$') {
            eor_file = tmp_argv;
          } else if (arguments[nextHead] == '&') {
            eor_file = NULL;
          } else {
            eor_file = arguments + nextHead;
          }
        }
        ++apo_flag;
        /*see '|' set flag */
      } else if (arguments[nextHead] == '|' && c == 1) {
		 /*if '\|' treat the pipe symbol as nomral character*/
        if (!HasSlash) {
          words[n] = NULL;
          ++n;
          pipe_pos = n; //record position for child process excute after pipe symbol
          ++vp_flag;
        } else if (HasSlash) {
          words[n] = arguments + nextHead;
          ++n;
          HasSlash = 0;
        }
      }
      /*see '!!' or '!' or '!$' set flag */
      else if (arguments[nextHead] == '!') {
        ++bb_flag;
		/*!! found*/
        if (arguments[nextHead + 1] == '!') {
          bb_num = -10;
        }
		/*! with numbers found*/		
		else if (arguments[nextHead + 1] != '!') {
          bb_num = atoi(arguments + nextHead + 1);
		  /*! with dollar sign found*/	
		  if(bb_num >0){
		  lastwordsize = history_len[bb_num] - history_head[bb_num - 1][history_words[bb_num - 1] - 1]; 
		  }
          if (arguments[nextHead + 1] == '$') { 
            doll_pos = n; // record position for words to swap
            ++dollar_flag;
          }
        }
        words[n] = arguments + nextHead;
        ++n;	
      } else {
        words[n] = arguments + nextHead;
        ++n;
      }
      ++cnt;
    }
	/*deep copy each char into my history table array*/
	if (arguments[nextHead] == '!'&& arguments[nextHead + 1] == '$')
	{
		for (x = 0; x < lastwordsize; ++x) {
		  histry_table[tmp + x + nextHead] = histry_table [history_head[history_lines - 1][history_words[history_lines - 1] - 1] +x];
		}
	}
	else
	{
		for (x = 0; x < c; ++x) {
		histry_table[tmp + x + nextHead] = arguments[nextHead + x];
		}
	}
    prevC = c;
    history_head[history_lines][headcnt] = tmp + nextHead; //store all arguments in history table  printf("head is %d\n",nextHead);
    ++headcnt;
    prevTail = nextHead + c - 1; //Prevtail head-size of word
	if (arguments[nextHead] == '!'&& arguments[nextHead + 1] == '$'){
	 nextHead = nextHead + lastwordsize;
	}
	else {
    nextHead = nextHead + c + 1; //nextword head+size of word
	}
  }
  line_length = line_length + nextHead;
  history_words[history_lines] = cnt; //number of every words
  words[n] = NULL;
  history_lines++;
  return n;
}

/*prompt for user*/
void prompt() {
  /*when there is a script file no prompt issued*/
  if (sf_flag == 0) {
    /*format specifier escape sequence %% is %*/
    printf("%%%d%% ", prompt_number);
  }
}

/*customized sighandler*/
void sighandler() {}

/*--------------------------------------banban----------------------------------------------*/
/* !! banban command found or ! with valid numbers 1-9*/
/* take all words in histry_table assign them to words according to every heads*/
/* Manually rephase from history table similar in parse() to reset all flags properly*/
/*------------------------------------------------------------------------------------------*/
void banban() {
  int j, k, tmp, num;
  k = 0;
  if (bb_num > 0) {
    num = bb_num - 1; // the line want to be tracked
  } else {
    num = history_lines - 2; // the previous command since my history_lines start at 0 will be -2
  }
  /*swap banban with "real" command also history head, words, and length*/
  history_words[history_lines - 1] = history_words[num];
  for (j = 0; j < history_words[num]; j++) {
    history_head[history_lines - 1][j] = history_head[num][j];
    for (k = 0; k < history_head[num][j + 1]; ++k) {
      histry_table[history_head[history_lines - 1][j] + k] = histry_table[history_head[num][j] + k];
    }
  }
  /*assign from historytable to new argument and set flags properly*/
  for (j = 0; j < history_words[num]; j++) {
    /*calculate the actual size of the words*/
    tmp = history_head[num][j + 1] - history_head[num][j];
    if (k < history_words[num]) {
      /*repharse to set up all flags again properly*/
      if (histry_table[history_head[num][j]] == '#') {
        words[k] = histry_table + history_head[num][j];
        if (tmp < 0) // this indicate the end of '#' since next start head is 0
        {
          words[k] = NULL;
        }
        ++k;
      } else if (histry_table[history_head[num][j]] == '<') {
        in_flag = in_flag + 2;
        in_file = histry_table + history_head[num][j + 1];
      } else if (histry_table[history_head[num][j]] == '>') {
        /*>>\0 command will be 3 */
        if (tmp == 3) {
          /*>&\0 command will be 3 */
          if (histry_table[history_head[num][j] + 1] == '&') {
            oa_flag = oa_flag + 2;
            eor_file = histry_table + history_head[num][j + 1];
          }
          ap_flag = ap_flag + 2;
          out_file = histry_table + history_head[num][j + 1];
        }
        /*>>&\0 command will be 4 */
        if (tmp == 4) {
          apo_flag = apo_flag + 2;
          eor_file = histry_table + history_head[num][j + 1];
        }
        /*>>\0 command will be 2 */
        if (tmp == 2) {
          out_flag = out_flag + 2;
          out_file = histry_table + history_head[num][j + 1];
        }
        ++j;
        /*| command found*/
      } else if (histry_table[history_head[num][j]] == '|') {
        if (!HasSlash) {
          words[k++] = NULL;
          pipe_pos = k;
          ++vp_flag;
        }
      } else {
        /*assgin the words according to each head number*/
        words[k] = histry_table + history_head[num][j];
        ++k;
      }
    }
    words[k] = NULL;
  }
}

/*--------------------------------------pipehandler---------------------------------------------------*/
/*child will create pipe child need close [1]  wirte in and redirect [0] read out to stdin*/
/*the granchild close [0] for read out and redirect [1] write in to stdout then parent wait child*/
/*finally, will have a flow from grandchild to child from [1] to [0] via the pipe.*/
/*----------------------------------------------------------------------------------------------------*/
void pipehandler() {
  int fildes[2]; // only support one pipe
  pid_t child, grandchild;

  fflush(stdout);
  fflush(stderr);

  /*first  child create the pipes */
  CHK(child = fork());
  if (0 == child) {
    CHK(pipe(fildes));

    /* Redirect input file to STDIN. Close input file descriptor. */
    if (in_flag != 0) {
	  CHK(dup2(input_fd, STDIN_FILENO));
	  CHK(close(input_fd));
    }
    /* Redirect output file to STDOUT. Close output file descriptor. */
    if (out_flag != 0 || ap_flag != 0) {
	  CHK(dup2(output_fd, STDOUT_FILENO));
	  CHK(close(output_fd));
    }

    /* Redirect eor to STDERR and STDOUT. Close file descriptor. */
    if (oa_flag != 0 || apo_flag != 0) {
	  CHK(dup2(eor_fd, STDOUT_FILENO));
	  CHK(dup2(eor_fd, STDERR_FILENO));
	  CHK(close(eor_fd));
    }

    fflush(stdout);
    fflush(stderr);

    /*grandchild close the read , redirect write to STDOUT*/
    CHK(grandchild = fork());
    if (grandchild == 0) {

      CHK(close(fildes[0]));
      CHK(dup2(fildes[1], STDOUT_FILENO));
      CHK(close(fildes[1]));
      CHK(execvp(words[0], words));
    }

    /*child close the wirte, redirect read to STDIN*/
    CHK(close(fildes[1]));
    CHK(dup2(fildes[0], STDIN_FILENO));
    CHK(close(fildes[0]));
    CHK(execvp(words[pipe_pos], words + pipe_pos));
  }
  /* Redirect /dev/null to STDIN */
  if (bg_flag != 0 && in_flag == 0) {
	 CHK(dup2(devnull_fd, STDIN_FILENO));
	 CHK(close(devnull_fd));
  }
  /*background found print the granchild pid*/
  if (bg_flag != 0) {
    if (words[pipe_pos] == NULL) {
      fprintf(stderr, "Invalid null command in pipe.\n");
    } else {
      printf("%s [%d]\n", words[0], child);
    }
  }

  /* child parent wait for child process to finish */
  else {
    for (;;) {
      pid_t pid;
      CHK(pid = wait(NULL));
      if (pid == child)
        break;
    }
  }
}


